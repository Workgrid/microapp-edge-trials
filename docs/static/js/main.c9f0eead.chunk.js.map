{"version":3,"sources":["components/Debugger.js","components/Tests.js","pages/Summary.js","pages/FeaturePolicyDetail.js","App.js","index.js"],"names":["className","onClick","window","location","reload","testTypes","name","inDetail","microapp","panel","style","useState","map","testType","inSummary","loading","result","tests","setTests","testActions","useRef","useEffect","current","Token","testToken","Title","testTitle","Show","testShow","Hide","testHide","updateTest","update","prevTests","test","setTimeout","a","getToken","token","process","decodedToken","decode","aud","console","warn","updateTitle","Math","floor","random","showDetail","url","origin","pathname","hideDetail","filter","key","aria-label","role","testName","href","target","Summary","MicroApp","id","audience","initialize","version","Tests","marginBottom","htmlFor","type","marginTop","placeholder","Debugger","detailPage","title","Detail","navigator","isGeoAvailable","mediaDevices","isMicAvailable","locationData","setLocationData","isMicOn","setIsMicOn","JSON","stringify","tabIndex","geolocation","getCurrentPosition","position","coords","latitude","longitude","err","prev","App","basename","path","exact","component","FeaturePolicyDetail","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c9f0eead.chunk.js","sourcesContent":["import React from 'react'\n\nexport default () => {\n  return (\n    <>\n      <button className=\"btn secondary\" onClick={() => window.location.reload(true)}>\n        Refresh\n      </button>\n    </>\n  )\n}\n","import React, { useState, useEffect, useRef } from 'react'\nimport { decode } from 'jsonwebtoken'\n\nconst testTypes = [{ name: 'Token' }, { name: 'Title' }, { name: 'Show', inDetail: false }, { name: 'Hide' }]\n\nexport default ({ microapp, panel = 'summary', className, style }) => {\n  const [tests, setTests] = useState(\n    testTypes.map((testType) => ({ inSummary: true, inDetail: true, loading: false, result: false, ...testType }))\n  )\n  const testActions = useRef({})\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  // useEffect(() => testToken(), [microapp])\n\n  useEffect(() => {\n    testActions.current.Token = testToken\n    testActions.current.Title = testTitle\n    testActions.current.Show = testShow\n    testActions.current.Hide = testHide\n  })\n\n  const runTest = (testName) => () => {\n    testActions.current[testName]()\n  }\n\n  const updateTest = (name, update) => {\n    setTests((prevTests) => {\n      return prevTests.map((test) => {\n        if (test.name === name) {\n          return { ...test, ...update }\n        } else {\n          return test\n        }\n      })\n    })\n  }\n\n  const testToken = () => {\n    if (!microapp) return\n\n    updateTest('Token', { loading: true, result: false })\n    // Arbitrarily add a \"loading time\" other wise you are kind of \"did it work?\"\n    setTimeout(async () => {\n      const token = await microapp.getToken()\n      // This would be done on a server side, notice how I'm not verifying the token\n      const decodedToken = decode(token)\n      // TODO alter this verification when this app is upgraded to the more secure token\n      if (decodedToken.aud === process.env.REACT_APP_AUD) {\n        updateTest('Token', { loading: false, result: true })\n      } else {\n        updateTest('Token', { loading: false, result: false })\n        console.warn(`Invalid token: ${decodedToken.aud} !== ${process.env.REACT_APP_AUD}`)\n      }\n    }, 500)\n  }\n\n  const testTitle = () => {\n    updateTest('Title', { result: false })\n    microapp.updateTitle(`Title Change: ${Math.floor(Math.random() * 500)}`)\n    updateTest('Title', { result: true })\n  }\n\n  const testShow = () => {\n    updateTest('Show', { result: false })\n    microapp.showDetail({ url: `${window.location.origin}${window.location.pathname}#/tests` })\n    updateTest('Show', { result: true })\n  }\n\n  const testHide = () => {\n    updateTest('Hide', { result: false })\n    microapp.hideDetail()\n    updateTest('Hide', { result: true })\n  }\n\n  return (\n    <div className={'container ' + className} style={style}>\n      <strong>Tests:</strong>\n      {tests\n        .filter((test) => (panel === 'summary' && test.inSummary) || (panel === 'detail' && test.inDetail))\n        .map((test) => (\n          <div className=\"checklist\" key={test.name}>\n            {test.loading ? (\n              <span aria-label=\"loading\" role=\"img\" className=\"pass\">\n                🤔\n              </span>\n            ) : (\n              <>\n                {test.result ? (\n                  <span aria-label=\"pass\" role=\"img\" className=\"pass\">\n                    ✅\n                  </span>\n                ) : (\n                  <span aria-label=\"fail\" role=\"img\" className=\"pass\">\n                    ❌\n                  </span>\n                )}\n              </>\n            )}\n            <div className=\"item\">{test.name}</div>\n            <div className=\"item\">\n              <button className=\"btn small action-small\" onClick={runTest(test.name)}>\n                Run\n              </button>\n            </div>\n          </div>\n        ))}\n\n      <div className=\"checklist\">\n        <a href=\"./test-internal.html\">Internal Link</a>\n      </div>\n      <div className=\"checklist\">\n        <a href=\"https://www.bing.com?q=external\" target=\"_blank\">\n          External Link\n        </a>\n      </div>\n      <div className=\"checklist\">\n        <a href=\"tel:1-562-867-5309\">Tel Link</a>\n      </div>\n      <div className=\"checklist\">\n        <a href=\"mailto:support@workgrid.com\">Mailto Link</a>\n      </div>\n    </div>\n  )\n}\n","import React, { useRef, useEffect } from 'react'\nimport MicroApp from '@workgrid/micro-app'\nimport Debugger from '../components/Debugger'\nimport './summary.css'\n\nimport { version } from '../../package.json'\nimport Tests from '../components/Tests'\n\nconst Summary = () => {\n  const microapp = useRef(\n    new MicroApp({\n      id: 'edge-microapp-local',\n      audience: 'edge-microapp'\n    })\n  )\n\n  useEffect(() => {\n    microapp.current.initialize()\n  }, [])\n\n  const showDetail = detailPage => {\n    // We have to use the hash router to show detail due to Github pages limitations\n    microapp.current.showDetail({\n      url: `${window.location.origin}${window.location.pathname}#/${detailPage}`,\n      title: 'Edge Microapp'\n    })\n  }\n\n  return (\n    <>\n      <h1>Edge MicroUI</h1>\n      <p>This is the \"edgy\" microapp v{version}</p>\n      <section className=\"section\">\n        <form>\n          <Tests style={{ marginBottom: '1rem' }} panel=\"summary\" microapp={microapp.current} />\n          <label htmlFor=\"test-input\">Test Input:</label>\n          <input id=\"test-input\" type=\"text\" style={{ marginTop: '.4rem' }} className=\"form-control\" placeholder=\"Input Test\" />\n        </form>\n      </section>\n      <div className=\"action-block vertical\">\n        <Debugger />\n        <button className=\"btn primary\" onClick={() => showDetail('featurepolicy')}>\n          Feature Policy\n        </button>\n      </div>\n    </>\n  )\n}\n\nexport default Summary\n","import React, { useRef, useEffect, useState } from 'react'\nimport MicroApp from '@workgrid/micro-app'\nimport './detail.css'\n\nconst Detail = () => {\n  const microapp = useRef(\n    new MicroApp({\n      id: 'edge-microapp',\n      audience: 'edge-microapp'\n    })\n  )\n\n  const [isGeoAvailable] = useState('geolocation' in navigator)\n  const [isMicAvailable] = useState(!!navigator.mediaDevices)\n  const [locationData, setLocationData] = useState('Get location data >>')\n  const [isMicOn, setIsMicOn] = useState(false)\n\n  useEffect(() => {\n    microapp.current.initialize()\n  }, [])\n\n  const getLocationData = () => {\n    if (isGeoAvailable) {\n      setLocationData('Getting location data')\n      try {\n        navigator.geolocation.getCurrentPosition(position => {\n          setLocationData(`lat: ${position.coords.latitude}, lon: ${position.coords.longitude}`)\n        })\n      } catch (err) {\n        setLocationData('Error fetching location data')\n      }\n    } else {\n      setLocationData('Geolocation is not available')\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>Feature Policy Detail</h1>\n      <p>\n        This detail attempts to get location data. You must include the featurePolicy in the catalog entry for this app.\n      </p>\n      <div className=\"example-block\">\n        <p>GeoLocation is available: {JSON.stringify(isGeoAvailable)}</p>\n        <div className=\"feature-block\">\n          <pre>{locationData}</pre>\n          <div tabIndex=\"0\" className=\"feature-icon\" onClick={getLocationData}>\n            <span role=\"img\" aria-label=\"position\">\n              🧭\n            </span>\n          </div>\n        </div>\n        <p>Media is available: {JSON.stringify(isMicAvailable)}</p>\n        <div className=\"feature-block\">\n          {isMicAvailable && (\n            <div tabIndex=\"1\" className=\"feature-icon\" onClick={() => setIsMicOn(prev => !prev)}>\n              <span role=\"img\" aria-label=\"mic\" className={isMicOn ? 'on' : 'off'}>\n                🎙️\n              </span>\n            </div>\n          )}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default Detail\n","import React from 'react'\nimport { HashRouter as Router, Route } from 'react-router-dom'\n\nimport Summary from './pages/Summary'\nimport FeaturePolicyDetail from './pages/FeaturePolicyDetail'\n\nconst App = () => {\n  return (\n    <div className=\"workgrid\">\n      <Router basename={window.location.pathname}>\n        <Route path=\"/\" exact component={Summary} />\n        <Route path=\"/featurepolicy\" component={FeaturePolicyDetail} />\n      </Router>\n    </div>\n  )\n}\n\nexport default App\n","import 'core-js/stable'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}