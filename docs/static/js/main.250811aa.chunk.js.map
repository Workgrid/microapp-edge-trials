{"version":3,"sources":["pages/Summary.js","pages/IFrameDetail.js","pages/GeolocationDetail.js","App.js","index.js"],"names":["Summary","useState","status","setStatus","microapp","useRef","MicroApp","id","audience","useEffect","console","log","current","initialize","showDetail","detailPage","url","window","location","origin","pathname","title","className","onClick","Detail","currentCount","setCurrentCount","iframeUrl","setIframeUrl","countdownTimer","setInterval","prev","clearInterval","style","width","borderWidth","src","navigator","isAvailable","locationData","setLocationData","JSON","stringify","geolocation","getCurrentPosition","position","err","App","basename","path","exact","component","IFrameDetail","GeolocationDetail","ReactDOM","render","document","getElementById"],"mappings":"mUA4CeA,EAzCC,WAAO,IAAD,EACQC,mBAAS,eADjB,mBACbC,EADa,KACLC,EADK,KAGdC,EAAWC,iBACf,IAAIC,IAAS,CACXC,GAAI,gBACJC,SAAU,mBAIdC,oBAAU,WACRC,QAAQC,IAAI,qCACZP,EAASQ,QAAQC,aACjBV,EAAU,gBACT,IAEH,IAAMW,EAAa,SAAAC,GAEjBX,EAASQ,QAAQE,WAAW,CAC1BE,IAAI,GAAD,OAAKC,OAAOC,SAASC,QAArB,OAA8BF,OAAOC,SAASE,SAA9C,aAA2DL,GAC9DM,MAAO,mBAIX,OACE,6BACE,6CACA,2DACA,2BAAInB,GACJ,yBAAKoB,UAAU,yBACb,4BAAQA,UAAU,YAAYC,QAAS,kBAAMT,EAAW,YAAxD,gBAGA,4BAAQQ,UAAU,UAAUC,QAAS,kBAAMT,EAAW,iBAAtD,kBCMOU,G,MAtCA,WACb,IAAMpB,EAAWC,iBACf,IAAIC,IAAS,CACXC,GAAI,gBACJC,SAAU,mBAJK,EAQqBP,mBAAS,GAR9B,mBAQZwB,EARY,KAQEC,EARF,OASezB,mBAAS,IATxB,mBASZ0B,EATY,KASDC,EATC,KAUbC,EAAiBxB,mBAgBvB,OAdAI,oBAAU,WACRL,EAASQ,QAAQC,aACjBgB,EAAejB,QAAUkB,YAAY,WACnCJ,EAAgB,SAAAK,GAAI,OAAIA,EAAO,KAC9B,MACF,IAEHtB,oBAAU,WACJgB,GAAgB,IAClBG,EAAa,qCACbI,cAAcH,EAAejB,WAE9B,CAACa,IAGF,yBAAKH,UAAU,aACb,6CACA,8HACA,yBAAKA,UAAU,gBACb,gDAAsBG,EAAtB,KACA,4BAAQQ,MAAO,CAAEC,MAAO,OAAQC,YAAa,GAAKd,MAAM,iBAAiBe,IAAKT,QCmBvEH,EAnDA,WACb,IAAMpB,EAAWC,iBACf,IAAIC,IAAS,CACXC,GAAI,gBACJC,SAAU,mBAJK,EAQGP,mBAAS,gBAAiBoC,WAAzCC,EARY,sBASqBrC,qBATrB,mBASZsC,EATY,KASEC,EATF,KAWnB/B,oBAAU,WACRL,EAASQ,QAAQC,cAChB,IAmBH,OACE,yBAAKS,UAAU,aACb,kDACA,+IAGA,yBAAKA,UAAU,iBACb,wDAA8BmB,KAAKC,UAAUJ,IAC7C,6BAAMC,IAER,yBAAKjB,UAAU,gBACb,4BAAQA,UAAU,UAAUC,QA5BV,WACtB,GAAIe,EAAa,CACf5B,QAAQC,IAAI,yBACZ,IACE0B,UAAUM,YAAYC,mBAAmB,SAAAC,GACvCnC,QAAQC,IAAI,qBAAsBkC,GAClCL,EAAgBC,KAAKC,UAAUG,EAAU,KAAM,MAEjD,MAAOC,GACPpC,QAAQC,IAAImC,GACZN,EAAgB,sCAGlBA,EAAgB,kCAed,mBC9BOO,EAVH,WACV,OACE,kBAAC,IAAD,CAAQC,SAAU/B,OAAOC,SAASE,UAChC,kBAAC,IAAD,CAAO6B,KAAK,IAAIC,OAAK,EAACC,UAAWnD,IACjC,kBAAC,IAAD,CAAOiD,KAAK,UAAUE,UAAWC,IACjC,kBAAC,IAAD,CAAOH,KAAK,eAAeE,UAAWE,MCP5CC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.250811aa.chunk.js","sourcesContent":["import React, { useRef, useEffect, useState } from 'react'\nimport MicroApp from '@workgrid/micro-app'\n\nconst Summary = () => {\n  const [status, setStatus] = useState('Constructed')\n\n  const microapp = useRef(\n    new MicroApp({\n      id: 'edge-microapp',\n      audience: 'edge-microapp'\n    })\n  )\n\n  useEffect(() => {\n    console.log('Initalizing Workgrid in useEffect')\n    microapp.current.initialize()\n    setStatus('Initialized')\n  }, [])\n\n  const showDetail = detailPage => {\n    // We have to use the hash router to show detail due to Github pages limitations\n    microapp.current.showDetail({\n      url: `${window.location.origin}${window.location.pathname}#/${detailPage}`,\n      title: 'Edge Microapp'\n    })\n  }\n\n  return (\n    <div>\n      <h1>Edge Microapp</h1>\n      <p>This is the \"edgy\" microapp.</p>\n      <p>{status}</p>\n      <div className=\"action-block vertical\">\n        <button className=\"secondary\" onClick={() => showDetail('iframe')}>\n          Inner iFrame\n        </button>\n        <button className=\"primary\" onClick={() => showDetail('geolocation')}>\n          Geolocation\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Summary\n","import React, { useRef, useEffect, useState } from 'react'\nimport MicroApp from '@workgrid/micro-app'\nimport './detail.css'\n\nconst Detail = () => {\n  const microapp = useRef(\n    new MicroApp({\n      id: 'edge-microapp',\n      audience: 'edge-microapp'\n    })\n  )\n\n  const [currentCount, setCurrentCount] = useState(5)\n  const [iframeUrl, setIframeUrl] = useState('')\n  const countdownTimer = useRef()\n\n  useEffect(() => {\n    microapp.current.initialize()\n    countdownTimer.current = setInterval(() => {\n      setCurrentCount(prev => prev - 1)\n    }, 1000)\n  }, [])\n\n  useEffect(() => {\n    if (currentCount <= 0) {\n      setIframeUrl('https://www.catapultsgame.com/app')\n      clearInterval(countdownTimer.current)\n    }\n  }, [currentCount])\n\n  return (\n    <div className=\"container\">\n      <h1>IFrame Detail</h1>\n      <p>Tests an inner iFrame. This is a typical use case for \"wrapping\" an existing app in a MicroApp.</p>\n      <div className=\"exampleBlock\">\n        <p>Showing iFrame in {currentCount}s</p>\n        <iframe style={{ width: '100%', borderWidth: 1 }} title=\"Example Iframe\" src={iframeUrl} />\n      </div>\n    </div>\n  )\n}\n\nexport default Detail\n","import React, { useRef, useEffect, useState } from 'react'\nimport MicroApp from '@workgrid/micro-app'\nimport './detail.css'\n\nconst Detail = () => {\n  const microapp = useRef(\n    new MicroApp({\n      id: 'edge-microapp',\n      audience: 'edge-microapp'\n    })\n  )\n\n  const [isAvailable] = useState('geolocation' in navigator)\n  const [locationData, setLocationData] = useState()\n\n  useEffect(() => {\n    microapp.current.initialize()\n  }, [])\n\n  const getLocationData = () => {\n    if (isAvailable) {\n      console.log('Getting location data')\n      try {\n        navigator.geolocation.getCurrentPosition(position => {\n          console.log('Got location data ', position)\n          setLocationData(JSON.stringify(position, null, 2))\n        })\n      } catch (err) {\n        console.log(err)\n        setLocationData('Error fetching location data')\n      }\n    } else {\n      setLocationData('Geolocation is not available')\n    }\n  }\n\n  return (\n    <div className=\"container\">\n      <h1>Geolocation Detail</h1>\n      <p>\n        This detail attempts to get location data. You must include the featurePolicy in the catalog entry for this app.\n      </p>\n      <div className=\"example-block\">\n        <p>GeoLocation is available: {JSON.stringify(isAvailable)}</p>\n        <pre>{locationData}</pre>\n      </div>\n      <div className=\"action-block\">\n        <button className=\"primary\" onClick={getLocationData}>\n          Get Location\n        </button>\n      </div>\n    </div>\n  )\n}\n\nexport default Detail\n","import React, { useEffect } from 'react'\nimport { HashRouter as Router, Route } from 'react-router-dom'\n\nimport Summary from './pages/Summary'\nimport IFrameDetail from './pages/IFrameDetail'\nimport GeolocationDetail from './pages/GeolocationDetail'\n\nconst App = () => {\n  return (\n    <Router basename={window.location.pathname}>\n      <Route path=\"/\" exact component={Summary} />\n      <Route path=\"/iframe\" component={IFrameDetail} />\n      <Route path=\"/geolocation\" component={GeolocationDetail} />\n    </Router>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n"],"sourceRoot":""}