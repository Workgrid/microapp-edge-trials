// @import './berkley-theme-vars';
@import "./base-theme-vars.scss";

.workgrid {
  background-color: map-get($defaultRoot, 'background');
  color: map-get($defaultRoot, 'foreground');
  font-family: $fontFamily;
  font-weight: map-get($fontWeights, 'default');
  font-size: map-get($fontSizes, 'default');
  * {
    box-sizing: border-box;
    font-family: $fontFamily;
  }

  h1,h2,h3,h4,h5,h6 {
    color: map-get(map-get($defaultContainers, 'dark'), 'contrastToRoot');
  }

  div,
  article,
  section,
  button {
    @each $containerName, $containerMap in $defaultContainers {
      &.#{$containerName} {
        font-weight: map-get($fontWeights, 'default');
        font-size: map-get($fontSizes, 'default');
        @if map-get($buttonOutlines, $containerName) == 'outline' {
          background-color: map-get($defaultRoot, 'background');
          color: map-get($containerMap, 'contrastToRoot');
          p {
            color: map-get($containerMap, 'contrastToRoot');
          }
        } @else {
          background-color: map-get($containerMap, 'contrastToRoot');
          color: map-get($containerMap, 'contrastToContainer');
          p {
            color: map-get($containerMap, 'contrastToContainer');
          }
        }

        input,
        textarea {
          border: 1px solid purple;
        }
      }
    }
  }

  p {
    color: map-get($defaultRoot, 'foreground');

    @each $containerName, $containerMap in $defaultContainers {
      span.#{$containerName},
      &.#{$containerName} {
        color: map-get($containerMap, 'contrastToRoot');
      }
    }

    @each $fontSizeName, $fontSize in $fontSizes {
      &.#{$fontSizeName} {
        font-size: $fontSize;
        line-height: map-get($fontLineHeights, $fontSizeName);
      }
    }
  }

  a {
    color: map-get(map-get($defaultContainers, 'link'), 'contrastToRoot');
  }

  input,
  textarea {
    flex: 0 0 auto;
    appearance: none;
    padding-top: 10px;
    padding-right: 10px;
    padding-bottom: 10px;
    padding-left: 10px;
    width: 100%;
    border-radius: $inputBorderRadius;
    outline: none;

    // Default styling for default container
    color: map-get($defaultRoot, 'foreground');
    background-color: map-get($defaultRoot, 'background');
    border: 1px solid map-get(map-get($defaultContainers, 'light'), 'contrastToRoot');

    &:focus {
      border-color: map-get(map-get($defaultContainers, 'link'), 'contrastToRoot');
      box-shadow: 0 0 3px 1px map-get(map-get($defaultContainers, 'link'), 'contrastToRoot');
    }

    &::placeholder {
      color: map-get(map-get($defaultContainers, 'light'), 'contrastToRoot');
    }
  }

  label {
    font-weight: map-get($fontWeights, 'bolder');
  }

  button {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
    text-align: center;
    outline: 0;
    cursor: pointer;
    border-radius: $buttonBorderRadius;

    @if $buttonText == 'sentence-case' {
      text-transform: lowercase;
      &::first-letter {
        text-transform: uppercase;
      }
    } @else {
      text-transform: $buttonText;
    }

    &:disabled {
      cursor: initial;
    }

    &:focus {
      border: 1px solid map-get(map-get($defaultContainers, 'link'), 'contrastToRoot');
      box-shadow: 0 0 3px 1px map-get(map-get($defaultContainers, 'link'), 'contrastToRoot');
    }

    @each $containerName, $containerMap in $defaultContainers {
      &.#{$containerName} {
        @if map-get($buttonOutlines, $containerName) == 'outline' {
          border: 1px solid map-get($containerMap, 'contrastToRoot');
        } @else {
          border: 1px solid transparent;
        }
        padding: 11px;
      }
    }

    &.small {
      padding: 5px 10px;
    }
  }
}
